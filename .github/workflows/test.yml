name: Tests

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        black --check --diff .

    - name: Import order check with isort
      run: |
        isort --check-only --diff .

    - name: Run basic functionality tests
      run: |
        python -m pytest tests/test_basic_functionality.py -v --tb=short

    - name: Run model component tests
      run: |
        python -m pytest tests/test_model_components.py -v --tb=short

    - name: Run example tests
      run: |
        python -m pytest tests/test_examples.py -v --tb=short

    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v --tb=short

    - name: Run all tests with coverage
      run: |
        python -m pytest tests/ --cov=climapan_lab --cov-report=xml --cov-report=html -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run custom test runner (fast mode)
      run: |
        cd tests
        python run_all_tests.py --fast

  performance-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Run performance tests
      run: |
        python -m pytest tests/test_performance.py -v --tb=short -x

    - name: Run full test suite with custom runner
      run: |
        cd tests
        python run_all_tests.py

  package-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import climapan_lab; print('Package import successful')"
        climapan-run --help || echo "Console script test completed"

  examples-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Test examples run without errors
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, 'climapan_lab/examples')
        
        # Test simple example
        try:
            from simple_example import main
            print('✓ Simple example import successful')
            # Don't run main() as it may take time, just test import
        except Exception as e:
            print(f'✗ Simple example failed: {e}')
            sys.exit(1)
            
        print('✓ All examples tested successfully')
        " 