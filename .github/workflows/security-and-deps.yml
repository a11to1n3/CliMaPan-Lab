name: Security & Dependencies

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
  push:
    paths:
      - 'requirements*.txt'
      - 'setup.py'
      - 'pyproject.toml'

jobs:
  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pip-audit
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run safety check on requirements
      run: |
        safety check -r requirements.txt --json --output safety-report.json || true
        if [ -f safety-report.json ]; then
          echo "Safety report generated"
          cat safety-report.json
        fi

    - name: Run pip-audit for vulnerabilities
      run: |
        pip-audit --desc --format=json --output=audit-report.json || true
        if [ -f audit-report.json ]; then
          echo "Pip audit report generated"
          cat audit-report.json
        fi

    - name: Run bandit security linter
      run: |
        bandit -r climapan_lab/ -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          echo "Bandit security report generated"
          cat bandit-report.json
        fi

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          audit-report.json
          bandit-report.json

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools

    - name: Check for outdated dependencies
      run: |
        pip install -r requirements.txt
        pip list --outdated --format=json > outdated-deps.json || true
        if [ -f outdated-deps.json ]; then
          echo "Outdated dependencies:"
          cat outdated-deps.json
        fi

    - name: Test with latest versions (non-breaking)
      run: |
        # Create a test requirements file with updated versions
        pip-compile --upgrade --allow-unsafe requirements.txt
        echo "Updated requirements would be:"
        cat requirements.txt
      continue-on-error: true

    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-reports
        path: |
          outdated-deps.json
          requirements.txt

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install radon xenon

    - name: Calculate code complexity
      run: |
        echo "## Code Complexity Report" > complexity-report.md
        echo "### Cyclomatic Complexity" >> complexity-report.md
        radon cc climapan_lab/ --show-complexity >> complexity-report.md || true
        echo "### Raw Metrics" >> complexity-report.md  
        radon raw climapan_lab/ >> complexity-report.md || true
        echo "### Maintainability Index" >> complexity-report.md
        radon mi climapan_lab/ >> complexity-report.md || true

    - name: Check for complex functions
      run: |
        echo "Functions with high complexity:"
        xenon --max-absolute C --max-modules B --max-average A climapan_lab/ || true

    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports  
        path: |
          complexity-report.md 